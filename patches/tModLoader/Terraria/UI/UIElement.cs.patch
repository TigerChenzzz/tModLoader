--- src/TerrariaNetCore/Terraria/UI/UIElement.cs
+++ src/tModLoader/Terraria/UI/UIElement.cs
@@ -8,7 +_,7 @@
 
 namespace Terraria.UI;
 
-public class UIElement : IComparable
+public partial class UIElement : IComparable
 {
 	public delegate void MouseEvent(UIMouseEvent evt, UIElement listeningElement);
 
@@ -28,6 +_,9 @@
 	public StyleDimension MinWidth = StyleDimension.Empty;
 	public StyleDimension MinHeight = StyleDimension.Empty;
 	private bool _isInitialized;
+	/// <summary>
+	/// If true, this element will be ignored for mouse interactions. This can be used to allow UIElement placed over other  UIElement to not be the target of mouse clicks. Defaults to false.
+	/// </summary>
 	public bool IgnoresMouseInteraction;
 	public bool OverflowHidden;
 	public SamplerState OverrideSamplerState;
@@ -58,6 +_,10 @@
 
 	public IEnumerable<UIElement> Children => Elements;
 
+	/// <summary>
+	/// True when the mouse is hovering over this UIElement. Useful for setting hover tooltips in DrawSelf or drawing hover visual indicators.
+	/// <para/> Note that this is true for all elements in the hierarchy that are hovered, not just the topmost element. For example, hovering over a button that is appended to a panel will mean that IsMouseHovering is true for the button and the panel. Use this or <c>ContainsPoint(Main.MouseScreen)</c> for behaviors that use this logic, such as setting <see cref="Player.mouseInterface"/> to true.
+	/// </summary>
 	public bool IsMouseHovering { get; private set; }
 
 	public event MouseEvent OnLeftMouseDown;
@@ -68,7 +_,9 @@
 	public event MouseEvent OnRightMouseUp;
 	public event MouseEvent OnRightClick;
 	public event MouseEvent OnRightDoubleClick;
+	/// <summary> Called by <see cref="MouseOver(UIMouseEvent)"/>. Use this event instead of inheritance if suitable. </summary>
 	public event MouseEvent OnMouseOver;
+	/// <summary> Called by <see cref="MouseOut(UIMouseEvent)"/>. Use this event instead of inheritance if suitable. </summary>
 	public event MouseEvent OnMouseOut;
 	public event ScrollWheelEvent OnScrollWheel;
 	public event ElementEvent OnUpdate;
@@ -167,13 +_,22 @@
 		if (overflowHidden) {
 			spriteBatch.End();
 			Rectangle clippingRectangle = GetClippingRectangle(spriteBatch);
+
+			/*
 			spriteBatch.GraphicsDevice.ScissorRectangle = clippingRectangle;
+			*/
+			Rectangle adjustedClippingRectangle = Rectangle.Intersect(clippingRectangle, spriteBatch.GraphicsDevice.ScissorRectangle);
+			spriteBatch.GraphicsDevice.ScissorRectangle = adjustedClippingRectangle;
+
 			spriteBatch.GraphicsDevice.RasterizerState = OverflowHiddenRasterizerState;
 			spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, anisotropicClamp, DepthStencilState.None, OverflowHiddenRasterizerState, null, Main.UIScaleMatrix);
 		}
 
 		DrawChildren(spriteBatch);
 		if (overflowHidden) {
+			// TML: save a new rasterizer state snapshot to restore
+			rasterizerState = spriteBatch.GraphicsDevice.RasterizerState;
+
 			spriteBatch.End();
 			spriteBatch.GraphicsDevice.ScissorRectangle = scissorRectangle;
 			spriteBatch.GraphicsDevice.RasterizerState = rasterizerState;
@@ -334,6 +_,11 @@
 		Recalculate();
 	}
 
+	/// <summary>
+	/// Called when the UIElement under the mouse is left clicked. The default code calls the <see cref="OnLeftMouseDown"/> event and then calls <see cref="LeftMouseDown"/> on the <see cref="Parent"/> element.
+	/// <para/> Since the method is called on all parent elements in the hierarchy, check <c>if (evt.Target == this)</c> for code only interested in direct clicks to this element. Children elements overlaying this element can be ignored by setting <see cref="IgnoresMouseInteraction"/> to true on them.
+	/// </summary>
+	/// <param name="evt"></param>
 	public virtual void LeftMouseDown(UIMouseEvent evt)
 	{
 		if (this.OnLeftMouseDown != null)
@@ -406,6 +_,12 @@
 			Parent.RightDoubleClick(evt);
 	}
 
+	/// <summary>
+	/// Called once when this UIElement becomes moused over (hovered). Default implementation sets <see cref="IsMouseHovering"/> to true, calls <see cref="OnMouseOver"/> event, then calls this same method on the <see cref="Parent"/> element.
+	/// <para/> Useful for changing visuals to indicate the element is interactable, as is the <see cref="OnMouseOver"/> event.
+	/// <para/> Any code that needs to run as long as the element is hovered should use check <see cref="IsMouseHovering"/> in <see cref="Update(GameTime)"/>.
+	/// <para/> <see cref="MouseOut(UIMouseEvent)"/> will be called when it no longer hovered.
+	/// </summary>
 	public virtual void MouseOver(UIMouseEvent evt)
 	{
 		IsMouseHovering = true;
@@ -416,6 +_,11 @@
 			Parent.MouseOver(evt);
 	}
 
+	/// <summary>
+	/// Called once when this UIElement is no longer moused over. Default implementation sets <see cref="IsMouseHovering"/> to false, calls <see cref="OnMouseOut"/> event, then calls this same method on the <see cref="Parent"/> element.
+	/// <para/> Useful for changing visuals to indicate the element is no longer interactable, as is the <see cref="OnMouseOut"/> event.
+	/// <para/> <see cref="MouseOver(UIMouseEvent)"/> will be called when it is hovered once again.
+	/// </summary>
 	public virtual void MouseOut(UIMouseEvent evt)
 	{
 		IsMouseHovering = false;
@@ -446,6 +_,9 @@
 		}
 	}
 
+	/// <summary>
+	/// Called each time this element is activated, which is usually when a <see cref="UIState"/> is activated via <see cref="UserInterface.SetState(UIState)"/>. Use this to run code to update elements whenever the UI is toggled on.
+	/// </summary>
 	public virtual void OnActivate()
 	{
 	}
@@ -485,6 +_,9 @@
 		_isInitialized = true;
 	}
 
+	/// <summary>
+	/// Called before the first time this element is activated (see <see cref="OnActivate"/>). Use this method to create and append other UIElement to this to build a UI. 
+	/// </summary>
 	public virtual void OnInitialize()
 	{
 	}
